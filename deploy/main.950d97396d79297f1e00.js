(()=>{var n,t={451:(n,t,e)=>{"use strict";var i=e(379),o=e.n(i),r=e(795),a=e.n(r),s=e(569),c=e.n(s),l=e(565),d=e.n(l),p=e(216),A=e.n(p),m=e(589),u=e.n(m),g=e(890),h={};h.styleTagTransform=u(),h.setAttributes=d(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=A(),o()(g.Z,h),g.Z&&g.Z.locals&&g.Z.locals;var f=e(963),x=e(252),v={class:"sub-root"},C={class:"navbar"},w=["href"],y=["src","alt"],E={class:"magnifying-container"},B=["src"],_={class:"search-form"};const b={name:"SearchComponent",data:function(){return{magnifying:{id:1,text:"Magnifying glass",link:"magnifying.png"}}},setup:function(){return{debounce:(n=null,function(t){clearTimeout(n),n=setTimeout((function(){t()}),250)})};var n},methods:{getImgUrl:function(n){return e(473)("./"+n)},toggleDropdown:function(){var n=document.querySelector(".magnifying-container");n.classList.contains("hide-magnifying")||n.classList.add("hide-magnifying")},closeDropdown:function(){document.querySelector(".magnifying-container").classList.remove("hide-magnifying")},updateStore:function(n){var t=n.target.value;this.$store.commit("update",t)}}};var k=e(238),D={};D.styleTagTransform=u(),D.setAttributes=d(),D.insert=c().bind(null,"head"),D.domAPI=a(),D.insertStyleElement=A(),o()(k.Z,D),k.Z&&k.Z.locals&&k.Z.locals;var Z=e(744);const S=(0,Z.Z)(b,[["render",function(n,t,e,i,o,r){return(0,x.wg)(),(0,x.iD)("div",{class:"search-container",onClick:t[2]||(t[2]=function(){return r.toggleDropdown&&r.toggleDropdown.apply(r,arguments)}),tabindex:"0"},[(0,x._)("div",E,[(0,x._)("img",{class:"magnifying-container_magnifying",src:r.getImgUrl(o.magnifying.link),alt:"Magnifying glass"},null,8,B)]),(0,x._)("div",_,[(0,x._)("input",{class:"search-form_input",type:"text",placeholder:"Search on Social...",onBlur:t[0]||(t[0]=function(){return r.closeDropdown&&r.closeDropdown.apply(r,arguments)}),onKeyup:t[1]||(t[1]=function(n){i.debounce((function(){r.updateStore(n)}))})},null,32)])])}]]);var Y=e(577),W={class:"icons-root"},L={class:"icons-container_img-container"},I=["src","alt"],T={key:0,class:"icons-container_img-container_items-length-container"},N={key:0,class:"icons-container_dropdown-container"},j={class:"icons-container_dropdown-container_ul"},q=["pkey"],U={class:"icons-container_dropdown-container_ul_item_link",href:"./index.html"},H={key:0,class:"icons-container_dropdown-container_ul_item_interspace"};const P={name:"NavBarIcons",data:function(){return{icons:[{id:1,name:"home",path:"home.png"},{id:2,name:"chat",path:"chat.png",list:[{id:1,text:"You have a message from Savannah"},{id:2,text:"You have 1 lost video call"}]},{id:3,name:"notifications",path:"notifications.png",list:[{id:1,text:"You have a friendship request"},{id:2,text:"John liked your comment"},{id:3,text:"There is an event near you tonight"}]},{id:4,name:"avatar",path:"avatar.png",list:[{id:1,text:"Account"},{id:2,text:"Settings"},{id:3,text:"Privacy"}]}]}},mounted:function(){document.addEventListener("click",this.eventDelegation)},methods:{getImgUrl:function(n){return e(473)("./"+n)},eventDelegation:function(n){var t=n.target;t.classList.contains("icons-container_img-container_icon")&&"home"!==t.alt||t.classList.contains("icons-container_dropdown-container_ul_item_close")||this.closeDropdown()},toggleDropdown:function(n){var t=Array.from(n.target.parentElement.parentElement.children).find((function(n){return n.classList.contains("icons-container_dropdown-container")}));if(t){var e=document.querySelector(".show-dropdown");t.classList.toggle("show-dropdown"),e&&e.classList.remove("show-dropdown")}},closeDropdown:function(){var n=document.querySelector(".show-dropdown");n&&n.classList.remove("show-dropdown")},deleteItem:function(n){var t=this,e=Array.from(n.target.parentElement.children).find((function(n){return n.classList.contains("icons-container_dropdown-container_ul_item_link")}));this.icons=this.icons.map((function(n){return{id:n.id,name:n.name,path:n.path,list:t.iconHasList(n.list,e)}}))},iconHasList:function(n,t){if(n)return n.filter((function(n){return n.text!==t.textContent}))}}};var z=e(691),R={};R.styleTagTransform=u(),R.setAttributes=d(),R.insert=c().bind(null,"head"),R.domAPI=a(),R.insertStyleElement=A(),o()(z.Z,R),z.Z&&z.Z.locals&&z.Z.locals;const M={name:"navbar",components:{search:S,icons:(0,Z.Z)(P,[["render",function(n,t,e,i,o,r){return(0,x.wg)(),(0,x.iD)("div",W,[((0,x.wg)(!0),(0,x.iD)(x.HY,null,(0,x.Ko)(o.icons,(function(n){return(0,x.wg)(),(0,x.iD)("div",{class:"icons-container",key:n.id},[(0,x._)("div",L,[(0,x._)("img",{class:"icons-container_img-container_icon",src:r.getImgUrl(n.path),alt:n.name,onClick:t[0]||(t[0]=function(){return r.toggleDropdown&&r.toggleDropdown.apply(r,arguments)}),tabindex:"0"},null,8,I),n.list&&n.list.length&&"avatar"!==n.name?((0,x.wg)(),(0,x.iD)("span",T,(0,Y.zw)(n.list.length),1)):(0,x.kq)("v-if",!0)]),n.list&&n.list.length?((0,x.wg)(),(0,x.iD)("div",N,[(0,x._)("ul",j,[((0,x.wg)(!0),(0,x.iD)(x.HY,null,(0,x.Ko)(n.list,(function(e){return(0,x.wg)(),(0,x.iD)("li",{class:"icons-container_dropdown-container_ul_item",key:n.name+e.id,pkey:n.id},[(0,x._)("a",U,(0,Y.zw)(e.text),1),"avatar"!==n.name?((0,x.wg)(),(0,x.iD)("div",H)):(0,x.kq)("v-if",!0),"avatar"!==n.name?((0,x.wg)(),(0,x.iD)("span",{key:1,class:"icons-container_dropdown-container_ul_item_close",onClick:t[1]||(t[1]=function(){return r.deleteItem&&r.deleteItem.apply(r,arguments)})},"x")):(0,x.kq)("v-if",!0)],8,q)})),128))])])):(0,x.kq)("v-if",!0)])})),128))])}]])},data:function(){return{logo:{id:1,name:"logo",path:"social-logo.png",link:"./index.html"}}},methods:{getImgUrl:function(n){return e(473)("./"+n)}}};var O=e(729),$={};$.styleTagTransform=u(),$.setAttributes=d(),$.insert=c().bind(null,"head"),$.domAPI=a(),$.insertStyleElement=A(),o()(O.Z,$),O.Z&&O.Z.locals&&O.Z.locals;const X=(0,Z.Z)(M,[["render",function(n,t,e,i,o,r){var a=(0,x.up)("search"),s=(0,x.up)("icons");return(0,x.wg)(),(0,x.iD)("div",C,[(0,x._)("a",{href:o.logo.link},[(0,x._)("img",{class:"logo",src:r.getImgUrl(o.logo.path),alt:o.logo.name},null,8,y)],8,w),(0,x.Wm)(a),(0,x.Wm)(s)])}]]);var F={class:"content-container"},K={class:"left-nav-container"},J=["href"];const Q={name:"LeftNav",data:function(){return{menu:[{id:1,text:"Simone",path:"./index.html"},{id:2,text:"Friends",path:"./index.html"},{id:3,text:"Groups",path:"./index.html"},{id:4,text:"Market",path:"./index.html"},{id:5,text:"Watch",path:"./index.html"},{id:6,text:"Memories",path:"./index.html"},{id:7,text:"Saved",path:"./index.html"},{id:8,text:"Ad Center",path:"./index.html"},{id:9,text:"Ads Manager",path:"./index.html"},{id:10,text:"Community Help",path:"./index.html"},{id:11,text:"Covid-19",path:"./index.html"},{id:12,text:"Events",path:"./index.html"},{id:13,text:"Favourites",path:"./index.html"},{id:14,text:"Jobs",path:"./index.html"},{id:15,text:"Most recents",path:"./index.html"},{id:16,text:"Pages",path:"./index.html"}]}}};var G=e(545),V={};V.styleTagTransform=u(),V.setAttributes=d(),V.insert=c().bind(null,"head"),V.domAPI=a(),V.insertStyleElement=A(),o()(G.Z,V),G.Z&&G.Z.locals&&G.Z.locals;const nn=(0,Z.Z)(Q,[["render",function(n,t,e,i,o,r){return(0,x.wg)(),(0,x.iD)("div",K,[((0,x.wg)(!0),(0,x.iD)(x.HY,null,(0,x.Ko)(o.menu,(function(n){return(0,x.wg)(),(0,x.iD)("a",{class:"item-container",key:n.id,href:n.path},(0,Y.zw)(n.text),9,J)})),128))])}]]);var tn={class:"home-nav-container"},en={class:"posts_name"};function on(n,t,e,i,o,r,a){try{var s=n[r](a),c=s.value}catch(n){return void e(n)}s.done?t(c):Promise.resolve(c).then(i,o)}function rn(n){return function(){var t=this,e=arguments;return new Promise((function(i,o){var r=n.apply(t,e);function a(n){on(r,i,o,a,s,"next",n)}function s(n){on(r,i,o,a,s,"throw",n)}a(void 0)}))}}e(666);const an={name:"HomeNav",methods:{apiCall:function(){var n=this;return rn(regeneratorRuntime.mark((function t(){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:try{["users","posts","albums","photos","comments"].forEach(function(){var t=rn(regeneratorRuntime.mark((function t(e){var i,o,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i="https://jsonplaceholder.typicode.com/".concat(e),t.next=3,fetch(i);case 3:return o=t.sent,t.next=6,o.json();case 6:(r=t.sent).label=e,n.$store.dispatch("updateAsyncUsersData",r);case 9:case"end":return t.stop()}}),t)})));return function(n){return t.apply(this,arguments)}}())}catch(n){console.log("Can't get data from API: "+n)}case 1:case"end":return t.stop()}}),t)})))()}},computed:{getHomePosts:function(){return this.$store.getters.postsWithUsers}},created:function(){this.apiCall()}};var sn=e(934),cn={};cn.styleTagTransform=u(),cn.setAttributes=d(),cn.insert=c().bind(null,"head"),cn.domAPI=a(),cn.insertStyleElement=A(),o()(sn.Z,cn),sn.Z&&sn.Z.locals&&sn.Z.locals;var ln={class:"right-nav-container"};const dn={name:"RightNav"},pn={name:"ContentContainer",components:{LeftNav:nn,HomeNav:(0,Z.Z)(an,[["render",function(n,t,e,i,o,r){return(0,x.wg)(),(0,x.iD)("div",tn,[((0,x.wg)(!0),(0,x.iD)(x.HY,null,(0,x.Ko)(r.getHomePosts,(function(n){return(0,x.wg)(),(0,x.iD)("div",{class:"posts",key:n.id},[(0,x._)("h3",null,(0,Y.zw)(n.author),1),(0,x._)("p",en,(0,Y.zw)(n.body),1)])})),128))])}],["__scopeId","data-v-377f4134"]]),RightNav:(0,Z.Z)(dn,[["render",function(n,t,e,i,o,r){return(0,x.wg)(),(0,x.iD)("div",ln)}]])}};var An=e(568),mn={};mn.styleTagTransform=u(),mn.setAttributes=d(),mn.insert=c().bind(null,"head"),mn.domAPI=a(),mn.insertStyleElement=A(),o()(An.Z,mn),An.Z&&An.Z.locals&&An.Z.locals;const un={name:"App",components:{Navbar:X,ContentContainer:(0,Z.Z)(pn,[["render",function(n,t,e,i,o,r){var a=(0,x.up)("left-nav"),s=(0,x.up)("home-nav"),c=(0,x.up)("right-nav");return(0,x.wg)(),(0,x.iD)("div",F,[(0,x.Wm)(a),(0,x.Wm)(s),(0,x.Wm)(c)])}]])}},gn=(0,Z.Z)(un,[["render",function(n,t,e,i,o,r){var a=(0,x.up)("navbar"),s=(0,x.up)("content-container");return(0,x.wg)(),(0,x.iD)("div",v,[(0,x.Wm)(a),(0,x.Wm)(s)])}]]),hn=(0,e(250).MT)({state:function(){return{keyWord:"",usersData:{users:{id:1,data:[]},posts:{id:2,data:[]},albums:{id:3,data:[]},photos:{id:4,data:[]},comments:{id:5,data:[]}}}},mutations:{updateKeyWord:function(n,t){n.keyWord=t},updateUsersData:function(n,t){n.usersData[t.label].data=t}},getters:{postsWithUsers:function(n){return n.usersData.posts.data.map((function(t){return{id:t.id,author:n.usersData.users.data.find((function(n){return n.id===t.userId})).name,body:t.body}})).sort((function(){return.5-Math.random()}))}},actions:{updateAsyncUsersData:function(n,t){(0,n.commit)("updateUsersData",t)}}});var fn;document.body.appendChild(((fn=document.createElement("div")).classList.add("app-root"),fn)),(0,f.ri)(gn).use(hn).mount(".app-root")},568:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.content-container {\n  display: flex;\n  flex-direction: row;\n}\n","",{version:3,sources:["webpack://./src/vue/components/ContentContainer.vue"],names:[],mappings:";AAoBA;EACE,aAAa;EACb,mBAAmB;AACrB",sourcesContent:['<template>\n  <div class="content-container">\n    <left-nav />\n    <home-nav />\n    <right-nav />\n  </div>\n</template>\n\n<script>\nimport LeftNav from "./LeftNav.vue";\nimport HomeNav from "./HomeNav.vue";\nimport RightNav from "./RightNav.vue";\n\nexport default {\n  name: "ContentContainer",\n  components: { LeftNav, HomeNav, RightNav },\n};\n<\/script>\n\n<style>\n.content-container {\n  display: flex;\n  flex-direction: row;\n}\n</style>\n'],sourceRoot:""}]);const s=a},934:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.home-nav-container[data-v-377f4134] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 80px 20px 40px 200px;\n}\n.posts[data-v-377f4134] {\n  margin: 40px 0;\n}\n","",{version:3,sources:["webpack://./src/vue/components/HomeNav.vue"],names:[],mappings:";AA0CA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,4BAA4B;AAC9B;AACA;EACE,cAAc;AAChB",sourcesContent:['<template>\n  <div class="home-nav-container">\n    <div class="posts" v-for="post in getHomePosts" :key="post.id">\n      <h3>{{ post.author }}</h3>\n      <p class="posts_name">{{ post.body }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport "regenerator-runtime/runtime";\n\nexport default {\n  name: "HomeNav",\n  methods: {\n    async apiCall() {\n      try {\n        const lists = ["users", "posts", "albums", "photos", "comments"];\n        lists.forEach(async (item) => {\n          const url = `https://jsonplaceholder.typicode.com/${item}`;\n          let response = await fetch(url);\n          const data = await response.json();\n          data.label = item;\n          this.$store.dispatch("updateAsyncUsersData", data);\n        });\n      } catch (error) {\n        console.log("Can\'t get data from API: " + error);\n      }\n    },\n  },\n  computed: {\n    getHomePosts() {\n      return this.$store.getters.postsWithUsers;\n    },\n  },\n  created() {\n    this.apiCall();\n  },\n};\n<\/script>\n\n<style scoped>\n.home-nav-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 80px 20px 40px 200px;\n}\n.posts {\n  margin: 40px 0;\n}\n</style>\n'],sourceRoot:""}]);const s=a},545:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.left-nav-container {\n  display: flex;\n  flex-direction: column;\n  width: 180px;\n  padding: 20px 10px;\n  top: 65px;\n  bottom: 0;\n  position: fixed;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  background-color: white;\n}\n.item-container {\n  background-color: white;\n  padding: 20px;\n  cursor: pointer;\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n  text-decoration: none;\n}\n.item-container:hover {\n  background-color: rgb(0, 0, 0, 0.2);\n}\n","",{version:3,sources:["webpack://./src/vue/components/LeftNav.vue"],names:[],mappings:";AA0GA;EACE,aAAa;EACb,sBAAsB;EACtB,YAAY;EACZ,kBAAkB;EAClB,SAAS;EACT,SAAS;EACT,eAAe;EACf,kBAAkB;EAClB,kBAAkB;EAClB,uBAAuB;AACzB;AACA;EACE,uBAAuB;EACvB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,eAAe;EACf,gBAAgB;EAChB,qBAAqB;AACvB;AACA;EACE,mCAAmC;AACrC",sourcesContent:['<template>\n  <div class="left-nav-container">\n    <a\n      class="item-container"\n      v-for="item in menu"\n      :key="item.id"\n      :href="item.path"\n    >\n      {{ item.text }}\n    </a>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "LeftNav",\n  data() {\n    return {\n      menu: [\n        {\n          id: 1,\n          text: "Simone",\n          path: "./index.html",\n        },\n        {\n          id: 2,\n          text: "Friends",\n          path: "./index.html",\n        },\n        {\n          id: 3,\n          text: "Groups",\n          path: "./index.html",\n        },\n        {\n          id: 4,\n          text: "Market",\n          path: "./index.html",\n        },\n        {\n          id: 5,\n          text: "Watch",\n          path: "./index.html",\n        },\n        {\n          id: 6,\n          text: "Memories",\n          path: "./index.html",\n        },\n        {\n          id: 7,\n          text: "Saved",\n          path: "./index.html",\n        },\n        {\n          id: 8,\n          text: "Ad Center",\n          path: "./index.html",\n        },\n        {\n          id: 9,\n          text: "Ads Manager",\n          path: "./index.html",\n        },\n        {\n          id: 10,\n          text: "Community Help",\n          path: "./index.html",\n        },\n        {\n          id: 11,\n          text: "Covid-19",\n          path: "./index.html",\n        },\n        {\n          id: 12,\n          text: "Events",\n          path: "./index.html",\n        },\n        {\n          id: 13,\n          text: "Favourites",\n          path: "./index.html",\n        },\n        {\n          id: 14,\n          text: "Jobs",\n          path: "./index.html",\n        },\n        {\n          id: 15,\n          text: "Most recents",\n          path: "./index.html",\n        },\n        {\n          id: 16,\n          text: "Pages",\n          path: "./index.html",\n        },\n      ],\n    };\n  },\n};\n<\/script>\n\n<style>\n.left-nav-container {\n  display: flex;\n  flex-direction: column;\n  width: 180px;\n  padding: 20px 10px;\n  top: 65px;\n  bottom: 0;\n  position: fixed;\n  overflow-y: scroll;\n  overflow-x: hidden;\n  background-color: white;\n}\n.item-container {\n  background-color: white;\n  padding: 20px;\n  cursor: pointer;\n  color: black;\n  font-size: 16px;\n  font-weight: 500;\n  text-decoration: none;\n}\n.item-container:hover {\n  background-color: rgb(0, 0, 0, 0.2);\n}\n</style>\n'],sourceRoot:""}]);const s=a},729:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.navbar {\n  display: flex;\n  flex-direction: row;\n  position: fixed;\n  width: 100%;\n  height: 65px;\n  padding: 5px;\n  background-color: #3b5998;\n}\n.logo {\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/vue/components/NavBar.vue"],names:[],mappings:";AAqCA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,yBAAyB;AAC3B;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB",sourcesContent:['<template>\n  <div class="navbar">\n    <a :href="logo.link">\n      <img class="logo" :src="getImgUrl(logo.path)" :alt="logo.name" />\n    </a>\n    <search />\n    <icons />\n  </div>\n</template>\n\n<script>\nimport search from "./SearchComponent.vue";\nimport icons from "./NavBarIcons.vue";\n\nexport default {\n  name: "navbar",\n  components: { search, icons },\n  data() {\n    return {\n      logo: {\n        id: 1,\n        name: "logo",\n        path: "social-logo.png",\n        link: "./index.html",\n      },\n    };\n  },\n  methods: {\n    getImgUrl(pic) {\n      const images = require.context("../../images/", false, /\\.png$/);\n      return images("./" + pic);\n    },\n  },\n};\n<\/script>\n\n<style>\n.navbar {\n  display: flex;\n  flex-direction: row;\n  position: fixed;\n  width: 100%;\n  height: 65px;\n  padding: 5px;\n  background-color: #3b5998;\n}\n.logo {\n  width: 50px;\n  height: 50px;\n  cursor: pointer;\n}\n</style>\n'],sourceRoot:""}]);const s=a},691:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.icons-root {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: auto;\n  font-size: 16px;\n}\n.icons-container {\n  margin: 0 5px;\n}\n.icons-container_img-container {\n  position: relative;\n}\n.icons-container_img-container_icon {\n  width: 35px;\n  height: auto;\n  cursor: pointer;\n}\n.icons-container_img-container_items-length-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 5px;\n  left: 30px;\n  width: 18px;\n  height: 18px;\n  margin-left: auto;\n  border-radius: 50%;\n  background-color: red;\n  font-size: 12px;\n  color: white;\n  text-align: center;\n  cursor: pointer;\n}\n.icons-container_img-container_icon:hover {\n  opacity: 0.7;\n}\n.icons-container_dropdown-container {\n  display: none;\n  position: absolute;\n  top: 80px;\n  right: 25px;\n  width: max-content;\n  background-color: white;\n  border: 2px solid #3b5998;\n}\n.show-dropdown {\n  display: block;\n}\n.icons-container_dropdown-container_ul {\n  padding: 10px;\n}\n.icons-container_dropdown-container_ul_item {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  list-style: none;\n  padding: 5px;\n}\n.icons-container_dropdown-container_ul_item_link {\n  text-decoration: none;\n  color: black;\n}\n.icons-container_dropdown-container_ul_item_link:hover {\n  text-decoration: underline;\n}\n.icons-container_dropdown-container_ul_item_interspace {\n  width: 20px;\n}\n.icons-container_dropdown-container_ul_item_close {\n  margin-left: auto;\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/vue/components/NavBarIcons.vue"],names:[],mappings:";AA6LA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,iBAAiB;EACjB,eAAe;AACjB;AACA;EACE,aAAa;AACf;AACA;EACE,kBAAkB;AACpB;AACA;EACE,WAAW;EACX,YAAY;EACZ,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,QAAQ;EACR,UAAU;EACV,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;EAClB,qBAAqB;EACrB,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,kBAAkB;EAClB,uBAAuB;EACvB,yBAAyB;AAC3B;AACA;EACE,cAAc;AAChB;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,qBAAqB;EACrB,YAAY;AACd;AACA;EACE,0BAA0B;AAC5B;AACA;EACE,WAAW;AACb;AACA;EACE,iBAAiB;EACjB,eAAe;AACjB",sourcesContent:['<template>\n  <div class="icons-root">\n    <div class="icons-container" v-for="icon in icons" :key="icon.id">\n      <div class="icons-container_img-container">\n        <img\n          class="icons-container_img-container_icon"\n          :src="getImgUrl(icon.path)"\n          :alt="icon.name"\n          @click="toggleDropdown"\n          tabindex="0"\n        />\n        <span\n          class="icons-container_img-container_items-length-container"\n          v-if="icon.list && icon.list.length && icon.name !== \'avatar\'"\n        >\n          {{ icon.list.length }}\n        </span>\n      </div>\n      <div\n        class="icons-container_dropdown-container"\n        v-if="icon.list && icon.list.length"\n      >\n        <ul class="icons-container_dropdown-container_ul">\n          <li\n            class="icons-container_dropdown-container_ul_item"\n            v-for="item in icon.list"\n            :key="icon.name + item.id"\n            :pkey="icon.id"\n          >\n            <a\n              class="icons-container_dropdown-container_ul_item_link"\n              href="./index.html"\n              >{{ item.text }}</a\n            >\n            <div\n              class="icons-container_dropdown-container_ul_item_interspace"\n              v-if="icon.name !== \'avatar\'"\n            ></div>\n            <span\n              class="icons-container_dropdown-container_ul_item_close"\n              v-if="icon.name !== \'avatar\'"\n              @click="deleteItem"\n              >x</span\n            >\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "NavBarIcons",\n  data() {\n    return {\n      icons: [\n        {\n          id: 1,\n          name: "home",\n          path: "home.png",\n        },\n        {\n          id: 2,\n          name: "chat",\n          path: "chat.png",\n          list: [\n            {\n              id: 1,\n              text: "You have a message from Savannah",\n            },\n            {\n              id: 2,\n              text: "You have 1 lost video call",\n            },\n          ],\n        },\n        {\n          id: 3,\n          name: "notifications",\n          path: "notifications.png",\n          list: [\n            {\n              id: 1,\n              text: "You have a friendship request",\n            },\n            {\n              id: 2,\n              text: "John liked your comment",\n            },\n            {\n              id: 3,\n              text: "There is an event near you tonight",\n            },\n          ],\n        },\n        {\n          id: 4,\n          name: "avatar",\n          path: "avatar.png",\n          list: [\n            {\n              id: 1,\n              text: "Account",\n            },\n            {\n              id: 2,\n              text: "Settings",\n            },\n            {\n              id: 3,\n              text: "Privacy",\n            },\n          ],\n        },\n      ],\n    };\n  },\n  mounted() {\n    document.addEventListener("click", this.eventDelegation);\n  },\n  methods: {\n    getImgUrl(pic) {\n      const images = require.context("../../images/", false, /\\.png$/);\n      return images("./" + pic);\n    },\n    eventDelegation(e) {\n      const clicked = e.target;\n      if (\n        (clicked.classList.contains("icons-container_img-container_icon") &&\n          clicked.alt !== "home") ||\n        clicked.classList.contains(\n          "icons-container_dropdown-container_ul_item_close"\n        )\n      ) {\n        return;\n      }\n      this.closeDropdown();\n    },\n    toggleDropdown(e) {\n      let dropdown = Array.from(\n        e.target.parentElement.parentElement.children\n      ).find((element) =>\n        element.classList.contains("icons-container_dropdown-container")\n      );\n      if (!dropdown) {\n        return;\n      }\n      const openDropdowns = document.querySelector(".show-dropdown");\n      dropdown.classList.toggle("show-dropdown");\n      if (openDropdowns) {\n        openDropdowns.classList.remove("show-dropdown");\n      }\n    },\n    closeDropdown() {\n      const dropdown = document.querySelector(".show-dropdown");\n      if (dropdown) {\n        dropdown.classList.remove("show-dropdown");\n      }\n    },\n    deleteItem(e) {\n      const clickedItem = Array.from(e.target.parentElement.children).find(\n        (element) =>\n          element.classList.contains(\n            "icons-container_dropdown-container_ul_item_link"\n          )\n      );\n      this.icons = this.icons.map((icon) => {\n        return {\n          id: icon.id,\n          name: icon.name,\n          path: icon.path,\n          list: this.iconHasList(icon.list, clickedItem),\n        };\n      });\n    },\n    iconHasList(list, target) {\n      if (!list) {\n        return;\n      }\n      return list.filter((item) => {\n        return item.text !== target.textContent;\n      });\n    },\n  },\n};\n<\/script>\n\n<style>\n.icons-root {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: auto;\n  font-size: 16px;\n}\n.icons-container {\n  margin: 0 5px;\n}\n.icons-container_img-container {\n  position: relative;\n}\n.icons-container_img-container_icon {\n  width: 35px;\n  height: auto;\n  cursor: pointer;\n}\n.icons-container_img-container_items-length-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 5px;\n  left: 30px;\n  width: 18px;\n  height: 18px;\n  margin-left: auto;\n  border-radius: 50%;\n  background-color: red;\n  font-size: 12px;\n  color: white;\n  text-align: center;\n  cursor: pointer;\n}\n.icons-container_img-container_icon:hover {\n  opacity: 0.7;\n}\n.icons-container_dropdown-container {\n  display: none;\n  position: absolute;\n  top: 80px;\n  right: 25px;\n  width: max-content;\n  background-color: white;\n  border: 2px solid #3b5998;\n}\n.show-dropdown {\n  display: block;\n}\n.icons-container_dropdown-container_ul {\n  padding: 10px;\n}\n.icons-container_dropdown-container_ul_item {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  list-style: none;\n  padding: 5px;\n}\n.icons-container_dropdown-container_ul_item_link {\n  text-decoration: none;\n  color: black;\n}\n.icons-container_dropdown-container_ul_item_link:hover {\n  text-decoration: underline;\n}\n.icons-container_dropdown-container_ul_item_interspace {\n  width: 20px;\n}\n.icons-container_dropdown-container_ul_item_close {\n  margin-left: auto;\n  cursor: pointer;\n}\n</style>\n'],sourceRoot:""}]);const s=a},238:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"\n.search-container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 200px;\n  padding: 10px;\n  margin-left: 35px;\n  border-radius: 25px;\n  background-color: white;\n  cursor: text;\n}\ninput.search-form_input:focus {\n  outline-width: 0;\n}\n.magnifying-container {\n  width: 25px;\n  margin-right: 10px;\n  transition: width 0.5s;\n}\n.magnifying-container_magnifying {\n  width: 100%;\n  height: auto;\n}\n.search-form {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n}\n.search-form_input {\n  width: 100%;\n  border: 0;\n  color: black;\n  text-align: left;\n}\n.hide-magnifying {\n  width: 0;\n}\n","",{version:3,sources:["webpack://./src/vue/components/SearchComponent.vue"],names:[],mappings:";AAiFA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,YAAY;EACZ,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,uBAAuB;EACvB,YAAY;AACd;AACA;EACE,gBAAgB;AAClB;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,sBAAsB;AACxB;AACA;EACE,WAAW;EACX,YAAY;AACd;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,mBAAmB;EACnB,WAAW;AACb;AACA;EACE,WAAW;EACX,SAAS;EACT,YAAY;EACZ,gBAAgB;AAClB;AACA;EACE,QAAQ;AACV",sourcesContent:['<template>\n  <div\n    class="search-container"\n    @click="toggleDropdown"\n    tabindex="0"\n  >\n    <div class="magnifying-container">\n      <img\n        class="magnifying-container_magnifying"\n        :src="getImgUrl(magnifying.link)"\n        alt="Magnifying glass"\n      />\n    </div>\n    <div class="search-form">\n      <input\n        class="search-form_input"\n        type="text"\n        placeholder="Search on Social..."\n        @blur="closeDropdown"\n        @keyup="\n          debounce(() => {\n            updateStore($event);\n          })\n        "\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: "SearchComponent",\n  data() {\n    return {\n      magnifying: {\n        id: 1,\n        text: "Magnifying glass",\n        link: "magnifying.png",\n      },\n    };\n  },\n  setup() {\n    function createDebounce() {\n      let timeout = null;\n      return function (fnc) {\n        clearTimeout(timeout);\n        timeout = setTimeout(() => {\n          fnc();\n        }, 250);\n      };\n    }\n\n    return {\n      debounce: createDebounce(),\n    };\n  },\n  methods: {\n    getImgUrl(pic) {\n      const images = require.context("../../images/", false, /\\.png$/);\n      return images("./" + pic);\n    },\n    toggleDropdown() {\n      const magnifying = document.querySelector(".magnifying-container");\n      if (magnifying.classList.contains("hide-magnifying")) {\n        return;\n      }\n      magnifying.classList.add("hide-magnifying");\n    },\n    closeDropdown() {\n      const magnifying = document.querySelector(".magnifying-container");\n      magnifying.classList.remove("hide-magnifying");\n    },\n    updateStore(event) {\n      const word = event.target.value;\n      this.$store.commit("update", word);\n    },\n  },\n};\n<\/script>\n\n<style>\n.search-container {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 200px;\n  padding: 10px;\n  margin-left: 35px;\n  border-radius: 25px;\n  background-color: white;\n  cursor: text;\n}\ninput.search-form_input:focus {\n  outline-width: 0;\n}\n.magnifying-container {\n  width: 25px;\n  margin-right: 10px;\n  transition: width 0.5s;\n}\n.magnifying-container_magnifying {\n  width: 100%;\n  height: auto;\n}\n.search-form {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n}\n.search-form_input {\n  width: 100%;\n  border: 0;\n  color: black;\n  text-align: left;\n}\n.hide-magnifying {\n  width: 0;\n}\n</style>\n'],sourceRoot:""}]);const s=a},890:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var i=e(537),o=e.n(i),r=e(645),a=e.n(r)()(o());a.push([n.id,"html,\nbody {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 14px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.app-root {\n  display: flex;\n  flex-direction: column;\n}\n\n","",{version:3,sources:["webpack://./src/styles/style.css"],names:[],mappings:"AAAA;;EAEE,WAAW;EACX,YAAY;EACZ,SAAS;EACT,sBAAsB;EACtB,yCAAyC;EACzC,eAAe;AACjB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;AACxB",sourcesContent:["html,\nbody {\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  box-sizing: border-box;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 14px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\n.app-root {\n  display: flex;\n  flex-direction: column;\n}\n\n"],sourceRoot:""}]);const s=a},473:(n,t,e)=>{var i={"./avatar.png":425,"./chat.png":275,"./home.png":5,"./magnifying.png":132,"./notifications.png":858,"./social-logo.png":297};function o(n){var t=r(n);return e(t)}function r(n){if(!e.o(i,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return i[n]}o.keys=function(){return Object.keys(i)},o.resolve=r,n.exports=o,o.id=473},425:(n,t,e)=>{"use strict";n.exports=e.p+"78b0cfb279c0cebdc82c.png"},275:(n,t,e)=>{"use strict";n.exports=e.p+"cf1cadb9d6faadd798a8.png"},5:(n,t,e)=>{"use strict";n.exports=e.p+"3b660319f0e6e5357870.png"},132:(n,t,e)=>{"use strict";n.exports=e.p+"7024e1a53b28f4454afe.png"},858:(n,t,e)=>{"use strict";n.exports=e.p+"596468a1aa9678ae7b41.png"},297:(n,t,e)=>{"use strict";n.exports=e.p+"7fa9af307863e2a328e3.png"}},e={};function i(n){var o=e[n];if(void 0!==o)return o.exports;var r=e[n]={id:n,exports:{}};return t[n](r,r.exports,i),r.exports}i.m=t,n=[],i.O=(t,e,o,r)=>{if(!e){var a=1/0;for(d=0;d<n.length;d++){for(var[e,o,r]=n[d],s=!0,c=0;c<e.length;c++)(!1&r||a>=r)&&Object.keys(i.O).every((n=>i.O[n](e[c])))?e.splice(c--,1):(s=!1,r<a&&(a=r));if(s){n.splice(d--,1);var l=o();void 0!==l&&(t=l)}}return t}r=r||0;for(var d=n.length;d>0&&n[d-1][2]>r;d--)n[d]=n[d-1];n[d]=[e,o,r]},i.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return i.d(t,{a:t}),t},i.d=(n,t)=>{for(var e in t)i.o(t,e)&&!i.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),i.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;i.g.importScripts&&(n=i.g.location+"");var t=i.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=n})(),(()=>{var n={179:0};i.O.j=t=>0===n[t];var t=(t,e)=>{var o,r,[a,s,c]=e,l=0;if(a.some((t=>0!==n[t]))){for(o in s)i.o(s,o)&&(i.m[o]=s[o]);if(c)var d=c(i)}for(t&&t(e);l<a.length;l++)r=a[l],i.o(n,r)&&n[r]&&n[r][0](),n[a[l]]=0;return i.O(d)},e=self.webpackChunksocial=self.webpackChunksocial||[];e.forEach(t.bind(null,0)),e.push=t.bind(null,e.push.bind(e))})();var o=i.O(void 0,[40],(()=>i(451)));o=i.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,